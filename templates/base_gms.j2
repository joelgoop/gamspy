{#
gamspy - Build and run GAMS models from Python
Copyright (C) 2014 Joel Goop

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
#}
{%- if title %}
$title {{ title }}
{%- endif %}
$ontext
{%- if title %}
Title: {{ title }}
{%- endif %}
{%- if author %}
Author: {{ author }}
{%- endif %}
{%- if description is defined %}

{{ description}}
{%- endif %}
$offtext
{%- import "macros_gms.j2" as macros %}

{% block set_def %}
{{ macros.section_title("set definitions")}}
{{ macros.render_set_defs(sets,aliases) }}
{% endblock %}

{% block param_def %}
{{ macros.section_title("parameter definitions")}}
{{ macros.render_definitions("parameters",parameters.values())}}
{% endblock %}


{% block gdx_load %}
{{ macros.section_title("load gdx data")}}
$onundf
$gdxin '{{ data_file|replace('/','\\') }}'
* Load sets
$load {{ sets.values()|sort(attribute="level")|join(', ',attribute='no_indices')|wordwrap(width=73,break_long_words=False,wrapstring='\n$load ') }}
* Load parameters
$load {{ parameters.values()|selectattr('load')|join(', ',attribute='no_indices')|wordwrap(width=73,break_long_words=False,wrapstring='\n$load ') }}
$gdxin
$offundf
{% endblock %}

{% block variable_defs %}
{{ macros.section_title("variable definitions")}}
{{ macros.render_variable_defs(variables)}}
{% endblock %}

{% block variable_lims %}
{{ macros.section_title("variable limits")}}
{{ macros.render_variable_lims(variables)}}
{% endblock %}

{% block equation_defs %}
{{ macros.section_title("equation definitions")}}
{{ macros.render_definitions("equations",equations.values())}}
{% endblock %}

{% block equations %}
{{ macros.section_title("model equations") }}
{{ macros.render_equations(equations)}}
{% endblock %}

{% block model_def %}MODEL {{ name }} / all /;{% endblock %}

{% block model_options %}
{% for op,val in options.items() -%}
{{ name }}.{{ op }} = {{ val }};
{% endfor %}
OPTION {{ model_type }} = {{ solver }};
{%- if opt_settings %}
{{ name }}.optfile = 1;
{% endif %}
{% endblock %}

{% block solve %}SOLVE {{ name }} using {{ model_type }} {% if maximize %}maximizing{% else %}minimizing{% endif %} {{ obj_var.name }};{% endblock %}

{% block dump %}
{%- for param,expr in output_parameters -%}
{{ param }} = {{ expr|string|wordwrap(width=75,break_long_words=False,wrapstring='\n    ') }};
{% endfor %}
{% if out_file -%}
EXECUTE_UNLOAD '{{ out_file|replace('/','\\') }}';
{%- endif %}
{% endblock %}

{% block returns_output %}
FILE status_file / {{ status_file|replace('/','\\') }} /;
PUT status_file 'modelstat,' {{ name }}.tmodstat /;
PUT status_file 'solvestat,' {{ name }}.tsolstat /;
{% endblock %}